<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS8.dao.admin.sports.AdminSportDAO">

    <!-- 모든 스포츠 종목 가져오기 -->
	<select id="getAllSports" resultType="String">
		SELECT sportName FROM sports ORDER BY id
	</select>
	
    <!-- 스포츠에 따른 모든 팀 이름 가져오기 -->
	<select id="getAllTeamsWithSports" resultType="com.spring.javaclassS8.vo.sports.TeamVO">
		SELECT t.teamName, s.sportName
		FROM teams t
		JOIN sports s ON t.sportId = s.id
		ORDER BY s.sportName, t.teamName
	</select>
	
	<!-- 스포츠 종목 이름으로 스포츠 고유번호 가져오기 -->
	<select id="getSportIdByName" resultType="java.lang.Integer">
		SELECT id FROM sports WHERE sportName = #{sportName}
	</select>
	
	<!-- 모든 스포츠 디테일 -->
	<select id="getAllSportsDetails" resultType="com.spring.javaclassS8.vo.sports.SportVO">
		SELECT * FROM sports ORDER BY id
	</select>
	
	<!-- 모든 팀 디테일 -->
	<select id="getAllTeamsDetails" resultType="com.spring.javaclassS8.vo.sports.TeamVO">
	  	SELECT t.*, s.sportName 
	    FROM teams t
	    JOIN sports s ON t.sportId = s.id
	    ORDER BY s.sportName, t.teamName
	</select>
	
	<!-- 모든 경기장 디테일 -->
	<select id="getAllVenuesDetails" resultType="com.spring.javaclassS8.vo.sports.VenueVO">
		SELECT v.*, s.sportName, t.teamName
	    FROM venues v
	    JOIN sports s ON v.sportId = s.id
	    JOIN teams t ON v.teamId = t.id
	    ORDER BY s.sportName, t.teamName, v.venueName
	</select>
	
	<!-- 팀 이름으로 팀 고유번호 가져오기 -->
	<select id="getTeamIdByName" resultType="java.lang.Integer">
		SELECT id FROM teams WHERE teamName = #{teamName}
	</select>
	
	<!-- 경기장 이름으로 경기장 고유번호 가져오기 -->
	<select id="getVenueIdByName" resultType="java.lang.Integer">
		SELECT id FROM venues WHERE venueName = #{venueName}
	</select>
	
	<!-- 스포츠 하위에 팀이나 경기장이 있는지 여부 확인 -->
	<select id="countTeamsAndVenuesBySportId" resultType="int">
		SELECT COUNT(*) FROM(
			SELECT id FROM teams WHERE sportID = #{sportId}
			UNION ALL
			SELECT id FROM venues WHERE sportId = #{sportId}
		)	AS combined
	</select>
	
	<!-- 팀 하위에 경기장이 있는지 여부 확인 -->
	<select id="countVenuesByTeamId" resultType="int">
        SELECT COUNT(*) FROM venues WHERE teamId = #{teamId}
    </select>
    
    <!-- 특정 스포츠의 팀 가져오기 -->
    <select id="getTeamsBySport" resultType="com.spring.javaclassS8.vo.sports.TeamVO">
    	SELECT t.*
    	FROM teams t
    	JOIN sports s ON t.sportId = s.id
    	WHERE s.sportName = #{sportName}
    	ORDER BY t.teamName
    </select>
    
    <!-- 특정 스포츠의 경기장 가져오기 -->
    <select id="getVenuesByTeam" resultType="com.spring.javaclassS8.vo.sports.VenueVO">
        SELECT v.*
        FROM venues v
        JOIN teams t ON v.teamId = t.id
        WHERE t.teamName = #{teamName}
        ORDER BY v.venueName
    </select>
    
    <!-- 가장 최근 등록된 게임 1개 가져오기 -->
    <select id="getRecentGames"  resultType="com.spring.javaclassS8.vo.sports.GameVO">
	    SELECT g.*, 
	           s.sportName, 
	           ht.teamName AS homeTeamName, 
	           ht.shortName AS homeTeamShortName,
	           at.teamName AS awayTeamName, 
	           at.shortName AS awayTeamShortName,
	           v.venueName
	    FROM games g
	    JOIN sports s ON g.sportId = s.id
	    JOIN teams ht ON g.homeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    ORDER BY g.id DESC
	    LIMIT #{limit}
    </select>
    
    <!-- 모든 경기 디테일 (경기 리스트) -->
	<select id="getAllGamesDetails" resultType="com.spring.javaclassS8.vo.sports.GameVO">
		SELECT g.*, s.sportName, ht.teamName AS homeTeamName, at.teamName AS awayTeamName, v.venueName
	    FROM games g
	    JOIN sports s ON g.sportId = s.id
	    JOIN teams ht ON g.HomeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    ORDER BY g.gameDate, ht.teamName
	</select>
	
	<!-- 좌석 등록 폼 경기장별 현재 사용된 좌석 수 확인 -->
	<select id="getUsedCapacityByVenueId" parameterType="int" resultType="int">
		SELECT COALESCE(SUM(capacity), 0)
		FROM seats
		WHERE venueId = #{venueId}
	</select>
	
	<!-- 경기장 총 수용인원 확인 -->
	<select id="getVenueCapacity" parameterType="int" resultType="int">
		SELECT capacity FROM venues WHERE id = #{venueId}
	</select>
	
	<!-- 새로 등록된 좌석을 포함한 해당 경기장의 모든 좌석 정보 반환 -->
	<select id="getSeatsForVenue" parameterType="int" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
        SELECT s.*, sp.sportName, t.teamName, v.venueName
        FROM seats s
        JOIN sports sp ON s.sportId = sp.id
        JOIN teams t ON s.teamId = t.id
        JOIN venues v ON s.venueId = v.id
        WHERE s.venueId = #{venueId}
        ORDER BY s.id DESC
	</select>
	
	<!-- 새로 등록된 좌석 정보 반환 -->
	<select id="getRecentlyAddedSeat" parameterType="int" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
	    SELECT s.*, sp.sportName, t.teamName, v.venueName
	    FROM seats s
	    JOIN sports sp ON s.sportId = sp.id
	    JOIN teams t ON s.teamId = t.id
	    JOIN venues v ON s.venueId = v.id
	    WHERE s.venueId = #{venueId}
	    ORDER BY s.id DESC
	    LIMIT 1
	</select>
	
	<!-- 이미 등록된 좌석 등급인지 확인 -->
	<select id="isSeatExists" parameterType="com.spring.javaclassS8.vo.sports.SeatVO" resultType="boolean">
	    SELECT EXISTS (
	        SELECT 1
	        FROM seats
	        WHERE sportId = #{sportId}
	          AND teamId = #{teamId}
	          AND venueId = #{venueId}
	          AND seatName = #{seatName}
	    )
	</select>
	
	<!-- 종목 이름, 팀 이름, 경기장 이름, 좌석 이름으로 seatId 찾기 -->
	<select id="getSeatIdByDetails" resultType="java.lang.Integer">
	    SELECT s.id
	    FROM seats s
	    JOIN sports sp ON s.sportId = sp.id
	    JOIN teams t ON s.teamId = t.id
	    JOIN venues v ON s.venueId = v.id
	    WHERE sp.sportName = #{sportName}
	    AND t.teamName = #{teamName}
	    AND v.venueName = #{venueName}
	    AND s.seatName = #{seatName}
	</select>
	
	<!-- 새로 등록된 요금 정보 반환 -->
	<select id="getRecentlyAddedPrice" resultType="com.spring.javaclassS8.vo.sports.PriceVO">
        SELECT p.*, s.sportName, t.teamName, v.venueName, st.seatName, tt.category as ticketTypeCategory, tt.name as ticketTypeName
        FROM prices p
        JOIN sports s ON p.sportId = s.id
        JOIN teams t ON p.teamId = t.id
        JOIN venues v ON p.venueId = v.id
        JOIN seats st ON p.seatId = st.id
        JOIN ticket_types tt ON p.ticketTypeId = tt.id
        ORDER BY p.id DESC LIMIT 1
	</select>
    
    <!-- 같은 정보로 이미 등록된 요금인지 확인 -->
    <select id="isPriceExists" resultType="int">
	    SELECT COUNT(*) > 0
	    FROM prices
	    WHERE sportId = #{sportId}
	    AND teamId = #{teamId}
	    AND venueId = #{venueId}
	    AND seatId = #{seatId}
	    AND ticketTypeId = #{ticketTypeId}
    </select>
	
	<!-- 등록 폼 내 권종 카테고리 가져오기 -->
	<select id="getTicketTypesByCategory" resultType="com.spring.javaclassS8.vo.sports.TicketTypeVO">
	    SELECT * FROM ticket_types WHERE category = #{category}
	</select>
	
	<!-- 등록 폼 내 선택된 경기장에 따른 좌석 등급 가져오기 -->
	<select id="getSeatsByVenueId" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
	    SELECT * FROM seats WHERE venueId = #{venueId}
	</select>
	
	<!-- 모든 좌석 등급 가져오기 -->
	<select id="getAllSeats" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
	    SELECT * FROM seats
	</select>
	
	<!-- 모든 권종 카테고리 가져오기 -->
	<select id="getAllTicketCategories" resultType="String">
	    SELECT DISTINCT category FROM ticket_types
	</select>
	
	<!-- 최근 등록된 요금 가져오기 -->
	<select id="getLastInsertedPrice" parameterType="int" resultType="com.spring.javaclassS8.vo.sports.PriceVO">
	    SELECT p.*, s.sportName, t.teamName, v.venueName, se.seatName, tt.name as ticketTypeName
	    FROM prices p
	    JOIN sports s ON p.sportId = s.id
	    JOIN teams t ON p.teamId = t.id
	    JOIN venues v ON p.venueId = v.id
	    JOIN seats se ON p.seatId = se.id
	    JOIN ticket_types tt ON p.ticketTypeId = tt.id
	    ORDER BY p.id DESC
	    LIMIT 1
	</select>
	
	<select id="getTicketTypeIdByName" resultType="java.lang.Integer">
	    SELECT id FROM ticket_types WHERE name = #{ticketTypeName}
	</select>
	
	<!-- 등록 폼 내 선택된 경기장에 따른 좌석 등급 가져오기 -->
	<select id="getSeatsByVenueName" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
	    SELECT s.* 
	    FROM seats s
	    JOIN venues v ON s.venueId = v.id
	    WHERE v.venueName = #{venueName}
	</select>
	
	<!-- 경기장 고유번호, 스포츠 고유번호, 팀 고유번호로 좌석 등급 가져오기 -->
	<select id="getSeatsByVenueIdAndSportIdAndTeamId" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
        SELECT * FROM seats 
        WHERE venueId = #{venueId} AND sportId = #{sportId} AND teamId = #{teamId}
    </select>
    
    <!-- 경기장 고유번호, 스포츠 고유번호, 홈팀 고유번호로 게임 가져오기 -->
    <select id="getGamesByVenueIdAndSportIdAndHomeTeamId" resultType="com.spring.javaclassS8.vo.sports.GameVO">
        SELECT * FROM games 
        WHERE venueId = #{venueId} AND sportId = #{sportId} AND homeTeamId = #{homeTeamId}
    </select>

	<!-- 스포츠 종목 등록 처리 -->
	<insert id="insertSport" parameterType="String">
		INSERT INTO sports (sportName) VALUES (#{sportName})
	</insert>
	
	<!-- 팀 등록 처리 -->
	<insert id="insertTeam">
		INSERT INTO teams (sportId, teamName, shortName)
        VALUES (#{sportId}, #{teamName}, #{shortName})
	</insert>
	
	<!-- 경기장 등록 처리 -->
	<insert id="insertVenue">
		INSERT INTO venues (sportId, teamId, venueName, address, capacity)
        VALUES (#{sportId}, #{teamId}, #{venueName}, #{address}, #{capacity})
	</insert>
	
	<!-- 경기 등록 처리 -->
	<insert id="registerGame" parameterType="com.spring.javaclassS8.vo.sports.GameVO">
	    INSERT INTO games (sportId, homeTeamId, awayTeamId, venueId, gameDate, gameTime)
	    SELECT s.id, ht.id, at.id, v.id, #{gameDate}, #{gameTime}
	    FROM sports s
	    JOIN teams ht ON s.id = ht.sportId AND s.sportName = #{sportName} AND ht.teamName = #{homeTeamName}
	    JOIN teams at ON s.id = at.sportId AND at.teamName = #{awayTeamName}
	    JOIN venues v ON v.sportId = s.id AND v.teamId = ht.id AND v.venueName = #{venueName}
	    LIMIT 1
	</insert>
	
	<!-- 좌석 등록 처리 -->
	<insert id="insertSeat" parameterType="com.spring.javaclassS8.vo.sports.SeatVO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO seats (sportId, teamId, venueId, seatName, capacity, seatColor)
        VALUES (#{sportId}, #{teamId}, #{venueId}, #{seatName}, #{capacity}, #{seatColor})
	</insert>
	
	<!-- 요금 등록 처리 -->
    <insert id="insertPrice" parameterType="com.spring.javaclassS8.vo.sports.PriceVO">
	    INSERT INTO prices (sportId, teamId, venueId, seatId, ticketTypeId, price)
	    VALUES (#{sportId}, #{teamId}, #{venueId}, #{seatId}, #{ticketTypeId}, #{price})
    </insert>
    
    <!-- 좌석 잔여수량 설정 -->
    <insert id="insertSeatInventory" parameterType="com.spring.javaclassS8.vo.sports.SeatInventoryVO">
        INSERT INTO seat_inventory (gameId, seatId, totalCapacity, availableCapacity)
        VALUES (#{gameId}, #{seatId}, #{totalCapacity}, #{availableCapacity})
    </insert>
	
	<!-- 스포츠 이름 수정 -->
	<update id="updateSport">
		UPDATE sports
		SET sportName = #{sportName}
		WHERE id = #{id}
	</update>
	
	<!-- 스포츠 이름 수정 -->
	<update id="updateTeam">
		UPDATE teams
		SET teamName = #{teamName}, shortName = #{shortName}
		WHERE id = #{id}
	</update>
	
	<!-- 스포츠 경기장 수정 -->
	<update id="updateVenue">
		UPDATE venues
		SET venueName = #{venueName}, address = #{address}, capacity = #{capacity}
		WHERE id = #{id}
	</update>
	
	<update id="updateGame">
		UPDATE games
		SET gameDate = #{gameDate}, gameTime = #{gameTime}
		WHERE id = #{id}
	</update>
	
	<!-- 스포츠 종목 삭제 -->
	<delete id="deleteSport">
        DELETE FROM sports WHERE id = #{id}
    </delete>
    
    <!-- 팀 삭제 -->
    <delete id="deleteTeam">
        DELETE FROM teams WHERE id = #{id}
    </delete>

	<!-- 경기장 삭제 -->
    <delete id="deleteVenue">
        DELETE FROM venues WHERE id = #{id}
    </delete>
    
    <!-- 경기 삭제 -->
    <delete id="deleteGame" parameterType="int">
    	DELETE FROM games WHERE id = #{id}
    </delete>
</mapper>