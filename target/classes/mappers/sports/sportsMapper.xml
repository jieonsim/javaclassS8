<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS8.dao.sports.SportsDAO">
	
	<!-- 오늘 날짜 ~ 당월 마지막 경기까지 가져오기 -->
    <select id="getGamesFromToday" resultType="com.spring.javaclassS8.vo.sports.GameVO">
	    <![CDATA[
	    SELECT g.*, 
	           ht.teamName as homeTeamName, 
	           at.teamName as awayTeamName,
	           v.venueName,
	           p.bookingOpenDaysBefore,
	           p.bookingOpenTime,
	           p.bookingCloseMinutesAfterStart,
	           s.sportName
	    FROM games g
	    JOIN teams ht ON g.homeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    JOIN sport_booking_policies p ON g.sportId = p.sportId
	    JOIN sports s ON g.sportId = s.id
	    WHERE g.gameDate >= #{today}
	      AND g.gameDate < #{firstDayOfNextMonth}
	      AND s.sportName = #{sport}
	    ORDER BY g.gameDate, g.gameTime
	    ]]>
    </select>
	
	<!-- 구단별 오늘 날짜 ~ 다음달 마지막 날까지 홈경기 가져오기 -->
    <select id="getTeamHomeGames" resultType="com.spring.javaclassS8.vo.sports.GameVO">
	     SELECT g.*, 
	           ht.teamName as homeTeamName, 
	           ht.shortName as homeTeamShortName,
	           at.teamName as awayTeamName, 
	           at.shortName as awayTeamShortName,
	           v.venueName,
	           p.bookingOpenDaysBefore,
	           p.bookingOpenTime,
	           p.bookingCloseMinutesAfterStart
	    FROM games g
	    JOIN teams ht ON g.homeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    JOIN sport_booking_policies p ON g.sportId = p.sportId
	    JOIN sports s ON g.sportId = s.id
	    WHERE ht.shortName = #{shortName}
	      AND g.gameDate BETWEEN #{startDate} AND #{endDate}
	      AND s.sportName = #{sport}
	    ORDER BY g.gameDate, g.gameTime
    </select>
    
    <!-- 경기 고유번호로 경기 정보 가져오기 -->
	<select id="getGameById" resultType="com.spring.javaclassS8.vo.sports.GameVO">
	    SELECT g.*, 
	           ht.teamName as homeTeamName, 
	           ht.shortName as homeTeamShortName,
	           at.teamName as awayTeamName, 
	           at.shortName as awayTeamShortName,
	           v.venueName
	    FROM games g
	    JOIN teams ht ON g.homeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    WHERE g.id = #{gameId}
	</select>

	<!-- 경기 고유번호로 잔여 좌석 수 가져오기 -->
    <select id="getSeatInventoriesByGameId" resultType="com.spring.javaclassS8.vo.sports.SeatInventoryVO">
        SELECT si.*, s.seatName, s.seatColor
        FROM seat_inventory si
        JOIN seats s ON si.seatId = s.id
        WHERE si.gameId = #{gameId}
    </select>
    
    <!-- 스포츠 고유번호로 1회 예매 시 최대 구매 가능 티켓 수 가져오기 -->
    <select id="getMaxTicketsPerBooking" resultType="int">
	    SELECT maxTicketsPerBooking 
	    FROM sport_booking_policies 
	    WHERE sportId = #{sportId}
	</select>
	
	<!-- 좌석 고유번호로 좌석 정보 가져오기 -->
	<select id="getSeatById" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
        SELECT * FROM seats WHERE id = #{seatId}
    </select>
    
    <!-- 좌석 고유번호로 권종리스트 가져오기 -->
    <select id="getTicketTypesBySeatId" resultType="com.spring.javaclassS8.vo.sports.TicketTypeVO">
	    SELECT tt.*
	    FROM ticket_types tt
	    JOIN prices p ON tt.id = p.ticketTypeId
	    WHERE p.seatId = #{seatId}
    </select>
    
    <!-- 좌석 고유번호로 요금 정보 가져오기 -->
    <select id="getPricesBySeatId" resultType="com.spring.javaclassS8.vo.sports.PriceVO">
        SELECT p.*, tt.category, tt.name as ticketTypeName, tt.description
        FROM prices p
        JOIN ticket_types tt ON p.ticketTypeId = tt.id
        WHERE p.seatId = #{seatId}
        ORDER BY tt.category, tt.id
    </select>
    
    <!-- 스포츠 고유번호로 예매 정책 정보 가져오기 -->
    <select id="getBookingPolicyBySportId" resultType="com.spring.javaclassS8.vo.sports.SportBookingPolicyVO">
    	SELECT * FROM sport_booking_policies WHERE sportId = #{sportId}
    </select>
</mapper>