<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS8.dao.event.EventDAO">
	<resultMap id="eventResultMap" type="com.spring.javaclassS8.vo.event.EventVO">
		<result property="eventCategory" column="eventCategory" javaType="com.spring.javaclassS8.vo.event.EventVO$EventCategory" 
        typeHandler="com.spring.javaclassS8.typehandler.EventCategoryTypeHandler"/>
    	<result property="status" column="status" javaType="com.spring.javaclassS8.vo.event.EventVO$Status" 
            typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
	</resultMap>

	<!-- 이벤트 전체 목록 가져오기 -->
	<select id="getAllEvents" resultMap="eventResultMap">
    	SELECT * FROM events ORDER BY createdAt DESC
	</select>
	
	<!-- 진행 중인 이벤트만 가져오기 -->
	<select id="getOngoingEvents" resultMap="eventResultMap">
    	SELECT * FROM events WHERE status = 'ONGOING' ORDER BY startDate DESC LIMIT #{offset}, #{limit}
	</select>
	
	<!-- 이벤트 아이디로 이벤트 데이터 가져오기 -->
	<select id="getEventById" parameterType="int" resultMap="eventResultMap">
    	SELECT * FROM events WHERE id = #{id}
	</select>
	
	<!-- 이벤트 응모 여부 확인 및 상태 반환 -->
	<select id="getParticipationStatus" resultType="string">
	    SELECT status
	    FROM event_participants
	    WHERE eventId = #{eventId} AND memberId = #{memberId}
	</select>
	
	<!-- 이벤트 컨텐츠 디테일에 작성된 모든 댓글 가져오기 -->
	<select id="getAllEventComments" resultType="com.spring.javaclassS8.vo.event.EventCommentVO">
    	SELECT ec.*, m.email
    	FROM event_comments ec
    	JOIN members m ON ec.memberId = m.id
    	WHERE ec.eventId = #{eventId}
    	ORDER BY ec.createdAt DESC
	</select>
	
	<!-- 이벤트 컨텐츠 디테일에 작성된 댓글 중 status가 active인것만 가져오기 -->
	<select id="getActiveEventComments" resultType="com.spring.javaclassS8.vo.event.EventCommentVO">
	    SELECT ec.*, m.email
	    FROM event_comments ec
	    JOIN members m ON ec.memberId = m.id
	    WHERE ec.eventId = #{eventId} AND ec.status = 'ACTIVE'
	    ORDER BY ec.createdAt DESC
	</select>
	
	<!-- 이벤트 당첨자 발표 리스트 -->
	<select id="getWinnerEvents" resultType="com.spring.javaclassS8.vo.event.WinnerEventVO">
	    SELECT wp.id as winnerPostId, e.eventCategory, e.title, e.startDate, e.endDate
	    FROM winner_posts wp
	    JOIN events e ON wp.eventId = e.id
	    WHERE wp.isPublished = true
	    ORDER BY wp.createdAt DESC
	    LIMIT #{offset}, #{limit}
	</select>
	
	<!-- 이벤트 당첨자 발표 디테일 -->
	<select id="getWinnerPostDetail" resultType="com.spring.javaclassS8.vo.event.WinnerPostDetailVO">
		SELECT e.eventCategory, wp.title, wp.content
	    FROM winner_posts wp
	    JOIN events e ON wp.eventId = e.id
	    WHERE wp.id = #{winnerPostId} AND wp.isPublished = true
	</select>
	
	<!-- 본인이 응모한 이벤트 리스트 가져오기 -->
	<select id="getEventParticipations" resultType="com.spring.javaclassS8.vo.event.EventParticipationVO">
        SELECT 
            e.title AS eventTitle,
            e.startDate,
            e.endDate,
            ep.participatedAt
        FROM 
            events e
        JOIN 
            (SELECT eventId, MAX(participatedAt) as participatedAt
             FROM event_participants
             WHERE memberId = #{memberId} AND status = 'ACTIVE'
             GROUP BY eventId) ep ON e.id = ep.eventId
        ORDER BY 
            ep.participatedAt DESC
        LIMIT #{offset}, #{limit}    
	</select>
	
	<!-- memberId로 해당 member가 응모한 이벤트 갯수 가져오기 -->
	<select id="getActiveEventCount" parameterType="int" resultType="int">
        SELECT COUNT(DISTINCT ep.eventId)
        FROM event_participants ep
        JOIN events e ON ep.eventId = e.id
        WHERE ep.memberId = #{memberId}
          AND ep.status = 'ACTIVE'
          AND e.endDate >= CURDATE()
	</select>
	
	<!-- memberId로 해당 member가 응모한 이벤트 전체 갯수 가져오기 -->
	<select id="getEventParticipationsCount" parameterType="int" resultType="int">
	    SELECT COUNT(DISTINCT ep.eventId)
	    FROM event_participants ep
	    WHERE ep.memberId = #{memberId} AND ep.status = 'ACTIVE'
	</select>
	
	<!-- 이벤트 당첨자 발표 총 개수 -->
	<select id="getWinnerEventsCount" resultType="int">
	    SELECT COUNT(*)
	    FROM winner_posts wp
	    WHERE wp.isPublished = true
	</select>
	
	<!-- 진행 중인 이벤트 총 개수 -->
	<select id="getOngoingEventsCount" resultType="int">
	    SELECT COUNT(*) FROM events WHERE status = 'ONGOING'
	</select>
	
	<!-- 이벤트 컨텐츠 디테일에 댓글 달기 -->
	<insert id="insertEventComment">
		INSERT INTO event_comments (eventId, memberId, comment)
		VALUES (#{eventId}, #{memberId}, #{comment})
	</insert>
	
	<!-- 이벤트 참여 상태 업데이트 또는 새로운 참여 추가 -->
	<insert id="insertOrUpdateEventParticipant">
	    INSERT INTO event_participants (eventId, memberId, status, participatedAt, cancelledAt)
	    VALUES (#{eventId}, #{memberId}, 'ACTIVE', CURRENT_TIMESTAMP, NULL)
	    ON DUPLICATE KEY UPDATE
	        status = 'ACTIVE',
	        participatedAt = CASE 
	            WHEN status = 'CANCELLED' THEN CURRENT_TIMESTAMP 
	            ELSE participatedAt 
	        END,
	        cancelledAt = NULL
	</insert>
	
	<!-- 이벤트 컨텐츠의 댓글 내용 수정 -->
	<update id="updateEventComment">
		UPDATE event_comments
		SET comment = #{comment}, updatedAt = CURRENT_TIMESTAMP
		WHERE id = #{commentId}
	</update>
	
	<!-- 이벤트 댓글 정보 가져오기 -->
	<select id="getEventCommentById" resultType="com.spring.javaclassS8.vo.event.EventCommentVO">
	    SELECT * FROM event_comments WHERE id = #{commentId}
	</select>
	
	<!-- 이벤트 컨텐츠의 댓글 삭제 -> event_comments 테이블의 status 필드 데이터 업데이트 -->
	<update id="updateEventCommentStatus">
		UPDATE event_comments
		SET status = #{status}, updatedAt = CURRENT_TIMESTAMP
		WHERE id = #{commentId}
	</update>
	
	<!-- 이벤트 참여 철회 -> event_participants 테이블의 status 필드 데이터 업데이트 -->
	<update id="updateEventParticipationToCancelled">
	    UPDATE event_participants
	    SET status = 'CANCELLED', 
	        cancelledAt = CURRENT_TIMESTAMP
	    WHERE eventId = #{eventId} AND memberId = #{memberId}
	</update>
	
	<!-- 이벤트 응모 여부 확인하기 -->
	<select id="getEventParticipation" resultType="com.spring.javaclassS8.vo.event.EventParticipantVO">
	    SELECT * FROM event_participants
	    WHERE eventId = #{eventId} AND memberId = #{memberId} AND status = 'ACTIVE'
	</select>
	
	<!-- 이벤트 재 참여 시 CANCELLED 상태에서 ACTIVE로 업데이트 -->
	<update id="updateEventParticipation">
	    UPDATE event_participants
	    SET status = 'ACTIVE', 
	        participatedAt = CURRENT_TIMESTAMP,
	        cancelledAt = NULL
	    WHERE eventId = #{eventId} AND memberId = #{memberId}
	</update>
	
	<!-- 이벤트 참여 기록이 전혀 없는 경우 새로 삽입 -->
	<insert id="insertEventParticipation">
	    INSERT INTO event_participants (eventId, memberId, status, participatedAt)
	    VALUES (#{eventId}, #{memberId}, 'ACTIVE', CURRENT_TIMESTAMP)
	</insert>
	
	<!-- 이벤트 ACTIVE 참여가 없는 경우, CANCELLED 상태의 참여가 있는지 확인 -->
	<select id="getCancelledEventParticipation" resultType="com.spring.javaclassS8.vo.event.EventParticipantVO">
	    SELECT * FROM event_participants
	    WHERE eventId = #{eventId} AND memberId = #{memberId} AND status = 'CANCELLED'
	</select>

</mapper>