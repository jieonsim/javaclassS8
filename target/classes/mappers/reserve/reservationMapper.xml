<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaclassS8.dao.reserve.ReservationDAO">
    
    <!-- 경기 고유번호로 경기 정보 가져오기 -->
	<select id="getGameById" resultType="com.spring.javaclassS8.vo.sports.GameVO">
	    SELECT g.*, 
	           ht.teamName as homeTeamName, 
	           ht.shortName as homeTeamShortName,
	           at.teamName as awayTeamName, 
	           at.shortName as awayTeamShortName,
	           v.venueName
	    FROM games g
	    JOIN teams ht ON g.homeTeamId = ht.id
	    JOIN teams at ON g.awayTeamId = at.id
	    JOIN venues v ON g.venueId = v.id
	    WHERE g.id = #{gameId}
	</select>

	<!-- 경기 고유번호로 잔여 좌석 수 가져오기 -->
    <select id="getSeatInventoriesByGameId" resultType="com.spring.javaclassS8.vo.sports.SeatInventoryVO">
        SELECT si.*, s.seatName, s.seatColor
        FROM seat_inventory si
        JOIN seats s ON si.seatId = s.id
        WHERE si.gameId = #{gameId}
    </select>
    
    <!-- 스포츠 고유번호로 1회 예매 시 최대 구매 가능 티켓 수 가져오기 -->
    <select id="getMaxTicketsPerBooking" resultType="int">
	    SELECT maxTicketsPerBooking 
	    FROM sport_booking_policies 
	    WHERE sportId = #{sportId}
	</select>
	
	<!-- 좌석 고유번호로 좌석 정보 가져오기 -->
	<select id="getSeatById" resultType="com.spring.javaclassS8.vo.sports.SeatVO">
        SELECT * FROM seats WHERE id = #{seatId}
    </select>
    
    <!-- 좌석 고유번호로 요금 정보 가져오기 -->
    <select id="getPricesBySeatId" resultType="com.spring.javaclassS8.vo.sports.PriceVO">
        SELECT p.*, tt.category, tt.name as ticketTypeName, tt.description
        FROM prices p
        JOIN ticket_types tt ON p.ticketTypeId = tt.id
        WHERE p.seatId = #{seatId}
        ORDER BY tt.category, tt.id
    </select>
    
    <!-- 스포츠 고유번호로 예매 정책 정보 가져오기 -->
    <select id="getBookingPolicyBySportId" resultType="com.spring.javaclassS8.vo.sports.SportBookingPolicyVO">
    	SELECT * FROM sport_booking_policies WHERE sportId = #{sportId}
    </select>
    
	<!-- memberId로 해당 유저에 등록된 유효한 예매권 정보 가져오기 -->
	<select id="getValidAdvanceTicketsByMemberId" resultType="java.util.HashMap">
	    SELECT at.id, at.advanceTicketNumber, at.expiresAt, at.used
	    FROM advance_tickets at
	    JOIN registered_advance_tickets rat ON at.id = rat.advanceTicketId
	    WHERE rat.memberId = #{memberId}
	    AND at.expiresAt > NOW()
	    AND at.used = FALSE
	    ORDER BY at.expiresAt ASC
	</select>
	
   <!-- 권종별 요금 가져오기 -->
   <select id="getPriceForTicketType" resultType="int">
	    SELECT price
	    FROM prices
	    WHERE sportId = #{sportId}
	    AND teamId = #{teamId}
	    AND venueId = #{venueId}
	    AND seatId = #{seatId}
	    AND ticketTypeId = #{ticketTypeId}
    </select>
    
    <!-- 마이페이지 > 예매확인 뷰 | memberId로 해당 유저의 예매완료 리스트 가져오기 -->
	<select id="getReservationListByMemberId" resultType="com.spring.javaclassS8.vo.reserve.ReservationVO">
	    SELECT 
	        r.id AS reservationId,
	        r.reservationNumber,
	        g.homeTeamId,
	        ht.teamName AS homeTeamName,
	        g.awayTeamId,
	        at.teamName AS awayTeamName,
	        g.gameDate,
	        g.gameTime,
	        r.ticketAmount,
	        DATE_FORMAT(DATE_SUB(CONCAT(g.gameDate, ' ', g.gameTime), INTERVAL sbp.cancellationDeadlineMinutesBeforeStart MINUTE), '%Y.%m.%d %H:%i') AS cancelDeadline,
	        r.status,
	        r.createdAt
	    FROM 
	        reservations r
	    JOIN 
	        games g ON r.gameId = g.id
	    JOIN 
	        teams ht ON g.homeTeamId = ht.id
	    JOIN 
	        teams at ON g.awayTeamId = at.id
	    JOIN 
	        sport_booking_policies sbp ON g.sportId = sbp.sportId
	    WHERE 
	        r.memberId = #{memberId}
	        AND r.status = '예매완료'
	    ORDER BY 
	        r.createdAt DESC
	    LIMIT #{offset}, #{limit}
	</select>
	
	<!-- memberId로 해당 유저의 예매완료 건 수 가져오기 -->
	<select id="getReservationCountByMemberId" resultType="int">
	    SELECT COUNT(*)
	    FROM reservations
	    WHERE memberId = #{memberId}
	    AND status = '예매완료'
	</select>
	
	<!-- 마이페이지 > quickMenuWrap > 오늘 날짜 기준 관람 가능한 나의 예매티켓 갯수 보여주기 -->
	<select id="getAvailableReservationCount" resultType="int">
		SELECT COUNT(*)
	    FROM reservations r
	    JOIN games g ON r.gameId = g.id
	    WHERE r.memberId = #{memberId}
	    AND r.status = '예매완료'
	    AND CONCAT(g.gameDate, ' ', g.gameTime) > NOW()
	</select>
	
	<!-- reservationId로 예매내역 가져오기 -->
	<select id="getReservationById" resultType="com.spring.javaclassS8.vo.reserve.ReservationVO">
        SELECT r.*, 
               g.gameDate, g.gameTime,
               ht.teamName AS homeTeamName, 
               at.teamName AS awayTeamName,
               m.name AS memberName,
               v.venueName,
               CASE WHEN r.totalAmount = 0 THEN '스포츠 예매권' ELSE '신용카드' END AS paymentMethod
        FROM reservations r
        JOIN games g ON r.gameId = g.id
        JOIN teams ht ON g.homeTeamId = ht.id
        JOIN teams at ON g.awayTeamId = at.id
        JOIN members m ON r.memberId = m.id
        JOIN venues v ON g.venueId = v.id
        WHERE r.id = #{reservationId}
    </select>

	<!-- reservationId로 예매상세내역 가져오기 -->
    <select id="getReservationDetailsById" resultType="com.spring.javaclassS8.vo.reserve.ReservationDetailVO">
        SELECT rd.*, s.seatName, tt.name AS ticketTypeName
        FROM reservation_details rd
        JOIN seats s ON rd.seatId = s.id
        JOIN ticket_types tt ON rd.ticketTypeId = tt.id
        WHERE rd.reservationId = #{reservationId}
    </select>

	<!-- reservationId로 스포츠예매권으로 예매된 내역 가져오기 -->
    <select id="getAdvanceTicketsForReservation" resultType="java.util.HashMap">
        SELECT at.advanceTicketNumber, at.expiresAt, p.price AS ticketPrice
        FROM advance_ticket_usage atu
        JOIN advance_tickets at ON atu.advanceTicketId = at.id
        JOIN reservation_details rd ON atu.reservationId = rd.reservationId
        JOIN prices p ON rd.seatId = p.seatId AND rd.ticketTypeId = p.ticketTypeId
        WHERE atu.reservationId = #{reservationId}
    </select>
    
    <!-- reservationId로 각 예매별 스포츠예매권 권종의 요금 가져오기 -->
    <select id="getAdvanceTicketPricesForReservation" resultType="java.util.HashMap">
	    SELECT DISTINCT at.advanceTicketNumber, p.price
	    FROM advance_ticket_usage atu
	    JOIN advance_tickets at ON atu.advanceTicketId = at.id
	    JOIN reservation_details rd ON atu.reservationId = rd.reservationId
	    JOIN prices p ON rd.seatId = p.seatId AND p.ticketTypeId = 8
	    WHERE atu.reservationId = #{reservationId}
	</select>
	
	<!-- 예매 처리 : reservations 테이블 레코드 생성 -->
	<insert id="insertReservation" parameterType="com.spring.javaclassS8.vo.reserve.ReservationVO" useGeneratedKeys="true" keyProperty="id">
	    INSERT INTO reservations (reservationNumber, memberId, gameId, totalAmount, ticketAmount, bookingFee, status)
	    VALUES (#{reservationNumber}, #{memberId}, #{gameId}, #{totalAmount}, #{ticketAmount}, #{bookingFee}, #{status})
	</insert>
    
    <!-- 예매 처리 : reservation_details 테이블 레코드 생성 -->
    <insert id="insertReservationDetails" parameterType="java.util.List">
	    INSERT INTO reservation_details (reservationId, seatId, ticketTypeId, seatBlock, seatRow, seatNumber, ticketPrice)
	    VALUES 
	    <foreach collection="list" item="detail" separator=",">
	        (#{detail.reservationId}, #{detail.seatId}, #{detail.ticketTypeId}, #{detail.seatBlock}, #{detail.seatRow}, #{detail.seatNumber}, #{detail.ticketPrice})
	    </foreach>
   	</insert>
	
	<!-- 예매 처리 : 예매권 사용 시 사용한 예매권 테이블에 레코드 생성 -->
   	<insert id="insertAdvanceTicketUsage">
	    INSERT INTO advance_ticket_usage (reservationId, advanceTicketId)
	    VALUES 
	    <foreach collection="advanceTicketIds" item="ticketId" separator=",">
	        (#{reservationId}, #{ticketId})
	    </foreach>
    </insert>
    
    <!-- 예매 처리 : 잔여 좌석 수 업데이트  -->
    <update id="updateSeatInventory">
    	UPDATE seat_inventory 
    	SET availableCapacity = availableCapacity - #{ticketAmount}
    	WHERE gameId = #{gameId} AND seatId = #{seatId}
    </update>
    
    <!-- 예매 처리 : 예매권 사용 시 예매권 사용으로 업데이트 -->
    <update id="updateAdvanceTickets">
	    UPDATE advance_tickets
	    SET used = TRUE, 
	        usedAt = CURRENT_TIMESTAMP, 
	        usedByMemberId = #{memberId}
	    WHERE id IN 
	    <foreach collection="advanceTicketIds" item="ticketId" open="(" separator="," close=")">
	        #{ticketId}
	    </foreach>
	</update>
    
</mapper>